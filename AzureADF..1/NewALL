2. Self-Hosted IR Deployment
ir-deployment.json:
{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "dataFactoryName": {
      "type": "string",
      "metadata": {
        "description": "Name of the existing Data Factory"
      }
    },
    "integrationRuntimeName": {
      "type": "string",
      "defaultValue": "SelfHostedIntegrationRuntime",
      "metadata": {
        "description": "Name of the Self-Hosted Integration Runtime"
      }
    }
  },
  "resources": [
    {
      "name": "[concat(parameters('dataFactoryName'), '/', parameters('integrationRuntimeName'))]",
      "type": "Microsoft.DataFactory/factories/integrationRuntimes",
      "apiVersion": "2018-06-01",
      "properties": {
        "type": "SelfHosted",
        "description": "Self-Hosted Integration Runtime for on-premises data access",
        "typeProperties": {}
      }
    }
  ],
  "outputs": {
    "integrationRuntimeName": {
      "type": "string",
      "value": "[parameters('integrationRuntimeName')]"
    }
  }
}

ir-parameters.json:
{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "dataFactoryName": {
        "value": "hsl-az-df-dev-datasynx"
      },
      "integrationRuntimeName": {
        "value": "SelfHostedIntegrationRuntime"
      }
    }
  }


  ir-pipeline.yml:
  
  trigger: none # Manual trigger only

pool:
  vmImage: 'windows-latest'

variables:
  resourceGroupName: 'rg-datasynx-dev'
  location: 'uksouth'
  templateFilePath: '$(Build.SourcesDirectory)/ir-deployment/ir-deployment.json'
  parametersFilePath: '$(Build.SourcesDirectory)/ir-deployment/ir-parameters.json'

steps:
- task: AzurePowerShell@5
  displayName: 'Deploy Integration Runtime'
  inputs:
    azureSubscription: 'YourServiceConnection'
    ScriptType: 'InlineScript'
    Inline: |
      # Deploy IR
      New-AzResourceGroupDeployment `
        -ResourceGroupName $(resourceGroupName) `
        -TemplateFile "$(templateFilePath)" `
        -TemplateParameterFile "$(parametersFilePath)"
      
      # Get Auth Key for Integration Runtime
      $irKey = Get-AzDataFactoryV2IntegrationRuntimeKey `
        -ResourceGroupName $(resourceGroupName) `
        -DataFactoryName $(DataFactoryName) `
        -Name $(IntegrationRuntimeName)
      
      # Store key in pipeline variable for later use
      Write-Host "##vso[task.setvariable variable=IRAuthKey;isOutput=true]$($irKey.AuthKey1)"
    azurePowerShellVersion: 'LatestVersion'
  name: DeployIR

  3. KeyVault Secret for VM Password
keyvault-secret.json:

{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "keyVaultName": {
        "type": "string",
        "metadata": {
          "description": "Name of the existing KeyVault"
        }
      },
      "secretName": {
        "type": "string",
        "defaultValue": "irvm-adminpassword",
        "metadata": {
          "description": "Name of the secret to store the VM admin password"
        }
      }
    },
    "variables": {
      "vmAdminPassword": "[concat('K', uniqueString(resourceGroup().id), 'x', '!')]"
    },
    "resources": [
      {
        "type": "Microsoft.KeyVault/vaults/secrets",
        "apiVersion": "2021-06-01-preview",
        "name": "[concat(parameters('keyVaultName'), '/', parameters('secretName'))]",
        "properties": {
          "value": "[variables('vmAdminPassword')]"
        }
      }
    ],
    "outputs": {
      "secretName": {
        "type": "string",
        "value": "[parameters('secretName')]"
      }
    }
  }

  keyvault-parameters.json:

  {
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "keyVaultName": {
        "value": "kv-iaz-dev"
      },
      "secretName": {
        "value": "irvm-adminpassword"
      }
    }
  }

  keyvault-pipeline.yml:

  trigger: none # Manual trigger only

pool:
  vmImage: 'windows-latest'

variables:
  resourceGroupName: 'rg-datasynx-dev'
  templateFilePath: '$(Build.SourcesDirectory)/keyvault-secret/keyvault-secret.json'
  parametersFilePath: '$(Build.SourcesDirectory)/keyvault-secret/keyvault-parameters.json'

steps:
- task: AzurePowerShell@5
  displayName: 'Create KeyVault Secret'
  inputs:
    azureSubscription: 'YourServiceConnection'
    ScriptType: 'InlineScript'
    Inline: |
      # Create VM admin password in KeyVault
      New-AzResourceGroupDeployment `
        -ResourceGroupName $(resourceGroupName) `
        -TemplateFile "$(templateFilePath)" `
        -TemplateParameterFile "$(parametersFilePath)"
    azurePowerShellVersion: 'LatestVersion'

    4. VM Deployment for Integration Runtime
    vm-deployment.json:

    {
        "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
        "contentVersion": "1.0.0.0",
        "parameters": {
          "location": {
            "type": "string",
            "defaultValue": "uksouth"
          },
          "vmBaseName": {
            "type": "string",
            "defaultValue": "vm-dmir"
          },
          "nicBaseName": {
            "type": "string",
            "defaultValue": "nic-dmir"
          },
          "osDiskBaseName": {
            "type": "string",
            "defaultValue": "osdisk-dmir"
          },
          "vmCount": {
            "type": "int",
            "defaultValue": 4
          },
          "vmSize": {
            "type": "string",
            "defaultValue": "Standard_D4s_v3"
          },
          "subnetResourceId": {
            "type": "string"
          },
          "adminUsername": {
            "type": "string",
            "defaultValue": "vmadmin"
          },
          "keyVaultName": {
            "type": "string"
          },
          "adminPasswordSecretName": {
            "type": "string",
            "defaultValue": "irvm-adminpassword"
          },
          "tags": {
            "type": "object",
            "defaultValue": {
              "Project": "DataSynx",
              "Environment": "Dev"
            }
          }
        },
        "resources": [
          {
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2021-03-01",
            "name": "[concat(parameters('nicBaseName'), copyIndex(1))]",
            "location": "[parameters('location')]",
            "tags": "[parameters('tags')]",
            "copy": {
              "name": "nicCopy",
              "count": "[parameters('vmCount')]"
            },
            "properties": {
              "ipConfigurations": [
                {
                  "name": "ipconfig1",
                  "properties": {
                    "subnet": {
                      "id": "[parameters('subnetResourceId')]"
                    },
                    "privateIPAllocationMethod": "Dynamic"
                  }
                }
              ],
              "enableAcceleratedNetworking": true
            }
          },
          {
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "2021-07-01",
            "name": "[concat(parameters('vmBaseName'), copyIndex(1))]",
            "location": "[parameters('location')]",
            "tags": "[parameters('tags')]",
            "copy": {
              "name": "vmCopy",
              "count": "[parameters('vmCount')]"
            },
            "dependsOn": [
              "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('nicBaseName'), copyIndex(1)))]"
            ],
            "properties": {
              "hardwareProfile": {
                "vmSize": "[parameters('vmSize')]"
              },
              "storageProfile": {
                "osDisk": {
                  "name": "[concat(parameters('osDiskBaseName'), copyIndex(1))]",
                  "createOption": "FromImage",
                  "managedDisk": {
                    "storageAccountType": "Premium_LRS"
                  }
                },
                "imageReference": {
                  "publisher": "MicrosoftWindowsServer",
                  "offer": "WindowsServer",
                  "sku": "2019-Datacenter",
                  "version": "latest"
                }
              },
              "networkProfile": {
                "networkInterfaces": [
                  {
                    "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('nicBaseName'), copyIndex(1)))]"
                  }
                ]
              },
              "osProfile": {
                "computerName": "[concat(parameters('vmBaseName'), copyIndex(1))]",
                "adminUsername": "[parameters('adminUsername')]",
                "adminPassword": "@Microsoft.KeyVault(SecretUri=https://[parameters('keyVaultName')].vault.azure.net/secrets/[parameters('adminPasswordSecretName')])"
              },
              "diagnosticsProfile": {
                "bootDiagnostics": {
                  "enabled": true
                }
              }
            }
          }
        ],
        "outputs": {
          "vmIds": {
            "type": "array",
            "copy": {
              "count": "[parameters('vmCount')]",
              "input": "[resourceId('Microsoft.Compute/virtualMachines', concat(parameters('vmBaseName'), copyIndex(1)))]"
            }
          }
        }
      }


      vm-parameters.json:
      
      

{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "location": {
      "value": "uksouth"
    },
    "vmBaseName": {
      "value": "vm-dmir"
    },
    "nicBaseName": {
      "value": "nic-dmir"
    },
    "osDiskBaseName": {
      "value": "osdisk-dmir"
    },
    "vmCount": {
      "value": 4
    },
    "vmSize": {
      "value": "Standard_D4s_v3"
    },
    "subnetResourceId": {
      "value": "/subscriptions/{subscription-id}/resourceGroups/rg-datasynx-dev/providers/Microsoft.Network/virtualNetworks/vnet-iaz-dev/subnets/snet-datasynx"
    },
    "adminUsername": {
      "value": "vmadmin"
    },
    "keyVaultName": {
      "value": "kv-iaz-dev"
    },
    "adminPasswordSecretName": {
      "value": "irvm-adminpassword"
    }
  }
}




vm-pipeline.yml:

trigger: none # Manual trigger only

pool:
  vmImage: 'windows-latest'

variables:
  resourceGroupName: 'rg-datasynx-dev'
  location: 'uksouth'
  templateFilePath: '$(Build.SourcesDirectory)/vm-deployment/vm-deployment.json'
  parametersFilePath: '$(Build.SourcesDirectory)/vm-deployment/vm-parameters.json'

steps:
- task: AzurePowerShell@5
  displayName: 'Deploy VMs'
  inputs:
    azureSubscription: 'YourServiceConnection'
    ScriptType: 'InlineScript'
    Inline: |
      # Deploy VMs
      New-AzResourceGroupDeployment `
        -ResourceGroupName $(resourceGroupName) `
        -TemplateFile "$(templateFilePath)" `
        -TemplateParameterFile "$(parametersFilePath)"
    azurePowerShellVersion: 'LatestVersion'



    5. VM Extension for IR Installation
vm-extension.json:

{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "location": {
        "type": "string",
        "defaultValue": "uksouth"
      },
      "vmBaseName": {
        "type": "string",
        "defaultValue": "vm-dmir"
      },
      "vmCount": {
        "type": "int",
        "defaultValue": 4
      },
      "dataFactoryName": {
        "type": "string"
      },
      "integrationRuntimeName": {
        "type": "string",
        "defaultValue": "SelfHostedIntegrationRuntime"
      }
    },
    "resources": [
      {
        "type": "Microsoft.Resources/deploymentScripts",
        "apiVersion": "2020-10-01",
        "name": "getIRKey",
        "location": "[parameters('location')]",
        "kind": "AzurePowerShell",
        "properties": {
          "azPowerShellVersion": "7.0",
          "scriptContent": "
            $irKey = Get-AzDataFactoryV2IntegrationRuntimeKey -ResourceGroupName $env:resourceGroupName -DataFactoryName $env:dataFactoryName -Name $env:irName
            $DeploymentScriptOutputs = @{}
            $DeploymentScriptOutputs['authKey'] = $irKey.AuthKey1
          ",
          "arguments": "",
          "environmentVariables": [
            {
              "name": "resourceGroupName",
              "value": "[resourceGroup().name]"
            },
            {
              "name": "dataFactoryName",
              "value": "[parameters('dataFactoryName')]"
            },
            {
              "name": "irName",
              "value": "[parameters('integrationRuntimeName')]"
            }
          ],
          "retentionInterval": "P1D",
          "timeout": "PT30M"
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines/extensions",
        "apiVersion": "2021-07-01",
        "name": "[concat(parameters('vmBaseName'), copyIndex(1), '/InstallIR')]",
        "location": "[parameters('location')]",
        "copy": {
          "name": "vmExtensionCopy",
          "count": "[parameters('vmCount')]"
        },
        "dependsOn": [
          "[resourceId('Microsoft.Resources/deploymentScripts', 'getIRKey')]"
        ],
        "properties": {
          "publisher": "Microsoft.Compute",
          "type": "CustomScriptExtension",
          "typeHandlerVersion": "1.10",
          "autoUpgradeMinorVersion": true,
          "settings": {
            "fileUris": [
              "https://raw.githubusercontent.com/YourRepo/YourProject/main/scripts/install-ir.ps1"
            ]
          },
          "protectedSettings": {
            "commandToExecute": "[concat('powershell -ExecutionPolicy Unrestricted -File install-ir.ps1 -AuthKey \"', reference('getIRKey').outputs.authKey, '\" -NodeName \"', concat(parameters('vmBaseName'), copyIndex(1)), '\"')]"
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines/extensions",
        "apiVersion": "2021-07-01",
        "name": "[concat(parameters('vmBaseName'), copyIndex(1), '/AzureMonitorWindowsAgent')]",
        "location": "[parameters('location')]",
        "copy": {
          "name": "monitoringExtensionCopy",
          "count": "[parameters('vmCount')]"
        },
        "dependsOn": [
          "[resourceId('Microsoft.Compute/virtualMachines/extensions', concat(parameters('vmBaseName'), copyIndex(1)), 'InstallIR')]"
        ],
        "properties": {
          "publisher": "Microsoft.Azure.Monitor",
          "type": "AzureMonitorWindowsAgent",
          "typeHandlerVersion": "1.0",
          "autoUpgradeMinorVersion": true,
          "enableAutomaticUpgrade": true
        }
      }
    ]
  }


  vm-extension-parameters.json:

  {
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "location": {
        "value": "uksouth"
      },
      "vmBaseName": {
        "value": "vm-dmir"
      },
      "vmCount": {
        "value": 4
      },
      "dataFactoryName": {
        "value": "hsl-az-df-dev-datasynx"
      },
      "integrationRuntimeName": {
        "value": "SelfHostedIntegrationRuntime"
      }
    }
  }


  install-ir.ps1 (Script to host in your repo):

  param(
    [Parameter(Mandatory=$true)]
    [string]$AuthKey,
    
    [Parameter(Mandatory=$true)]
    [string]$NodeName
)

# Set TLS to 1.2
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

# Download the IR installer
$installerPath = "$env:TEMP\IntegrationRuntime.msi"
Invoke-WebRequest -Uri "https://aka.ms/dmg" -OutFile $installerPath

# Install the IR silently
Start-Process -FilePath "msiexec.exe" -ArgumentList "/i", $installerPath, "/quiet" -Wait

# Wait for the service to be available
$timeout = New-TimeSpan -Minutes 5
$stopwatch = [System.Diagnostics.Stopwatch]::StartNew()
$serviceInstalled = $false

while (-not $serviceInstalled -and $stopwatch.Elapsed -lt $timeout) {
    try {
        $service = Get-Service -Name "DIAHostService" -ErrorAction SilentlyContinue
        if ($service -ne $null) {
            $serviceInstalled = $true
        }
        else {
            Write-Output "Waiting for DIAHostService to be installed..."
            Start-Sleep -Seconds 10
        }
    }
    catch {
        Write-Output "Error checking service status: $_"
        Start-Sleep -Seconds 10
    }
}

if (-not $serviceInstalled) {
    throw "Integration Runtime service was not installed within the timeout period."
}

# Register the IR with the key
$dmgPath = "C:\Program Files\Microsoft Integration Runtime\4.0\Shared\dmgcmd.exe"
& $dmgPath -RegisterNewNode $AuthKey $NodeName

# Enable concurrent job limit to 24
& $dmgPath -EnableConcurrentJobsLimit 24

Write-Output "Integration Runtime installation and configuration complete."



vm-extension-pipeline.yml:

trigger: none # Manual trigger only

pool:
  vmImage: 'windows-latest'

variables:
  resourceGroupName: 'rg-datasynx-dev'
  location: 'uksouth'
  templateFilePath: '$(Build.SourcesDirectory)/vm-extension/vm-extension.json'
  parametersFilePath: '$(Build.SourcesDirectory)/vm-extension/vm-extension-parameters.json'

steps:
- task: AzurePowerShell@5
  displayName: 'Install IR on VMs'
  inputs:
    azureSubscription: 'YourServiceConnection'
    ScriptType: 'InlineScript'
    Inline: |
      # Deploy VM Extensions
      New-AzResourceGroupDeployment `
        -ResourceGroupName $(resourceGroupName) `
        -TemplateFile "$(templateFilePath)" `
        -TemplateParameterFile "$(parametersFilePath)"
    azurePowerShellVersion: 'LatestVersion'



    Master Deployment Pipeline (Optional)
    You can create a master pipeline that calls each of these individual pipelines in sequence:
    master-pipeline.yml:
    
    
    trigger: none # Manual trigger only

    pool:
      vmImage: 'windows-latest'
    
    stages:
    - stage: DeployIR
      jobs:
      - job: RunIRPipeline
        steps:
        - task: AzureCLI@2
          displayName: 'Run IR Pipeline'
          inputs:
            azureSubscription: 'YourServiceConnection'
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              az pipelines run --name "ir-pipeline" --branch "main" --organization "https://dev.azure.com/YourOrg" --project "YourProject"
    
    - stage: DeployKeyVaultSecret
      dependsOn: DeployIR
      jobs:
      - job: RunKeyVaultPipeline
        steps:
        - task: AzureCLI@2
          displayName: 'Run KeyVault Pipeline'
          inputs:
            azureSubscription: 'YourServiceConnection'
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              az pipelines run --name "keyvault-pipeline" --branch "main" --organization "https://dev.azure.com/YourOrg" --project "YourProject"
    
    - stage: DeployVMs
      dependsOn: DeployKeyVaultSecret
      jobs:
      - job: RunVMPipeline
        steps:
        - task: AzureCLI@2
          displayName: 'Run VM Pipeline'
          inputs:
            azureSubscription: 'YourServiceConnection'
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              az pipelines run --name "vm-pipeline" --branch "main" --organization "https://dev.azure.com/YourOrg" --project "YourProject"
    
    - stage: DeployVMExtensions
      dependsOn: DeployVMs
      jobs:
      - job: RunVMExtensionPipeline
        steps:
        - task: AzureCLI@2
          displayName: 'Run VM Extension Pipeline'
          inputs:
            azureSubscription: 'YourServiceConnection'
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              az pipelines run --name "vm-extension-pipeline" --branch "main" --organization "https://dev.azure.com/YourOrg" --project "YourProject"  



              Option 1: Azure Storage Approach (Recommended)
              This approach uploads your script to Azure Storage temporarily, then your VMs download it from there.
              Step 1: Modify your Azure Pipeline YAML
              Add these tasks to your pipeline before your ARM deployment:


              - task: AzurePowerShell@5
              displayName: 'Upload Script to Storage'
              inputs:
                azureSubscription: 'YourServiceConnection'
                ScriptType: 'InlineScript'
                Inline: |
                  # Create storage container if it doesn't exist
                  $storageAccount = "stdeploymentscripts$(Get-Random -Maximum 999)"
                  $container = "scripts"
                  
                  # Check if storage account exists, create if it doesn't
                  $storageAccountExists = Get-AzStorageAccount -ResourceGroupName $(resourceGroupName) -Name $storageAccount -ErrorAction SilentlyContinue
                  if (-not $storageAccountExists) {
                      New-AzStorageAccount -ResourceGroupName $(resourceGroupName) -Name $storageAccount -Location $(location) -SkuName Standard_LRS
                  }
                  
                  # Get storage account key and create context
                  $key = (Get-AzStorageAccountKey -ResourceGroupName $(resourceGroupName) -Name $storageAccount)[0].Value
                  $context = New-AzStorageContext -StorageAccountName $storageAccount -StorageAccountKey $key
                  
                  # Create container if it doesn't exist
                  New-AzStorageContainer -Name $container -Context $context -Permission Blob -ErrorAction SilentlyContinue
                  
                  # Upload script to storage
                  Set-AzStorageBlobContent -File "$(Build.SourcesDirectory)/install-ir.ps1" -Container $container -Blob "install-ir.ps1" -Context $context -Force
                  
                  # Generate SAS token (valid for 1 hour)
                  $sasToken = New-AzStorageBlobSASToken -Container $container -Blob "install-ir.ps1" -Permission r -ExpiryTime (Get-Date).AddHours(1) -Context $context
                  
                  # Create full URL with SAS token
                  $scriptUrl = "https://$storageAccount.blob.core.windows.net/$container/install-ir.ps1$sasToken"
                  
                  # Set as pipeline variable
                  Write-Host "##vso[task.setvariable variable=scriptUrl]$scriptUrl"
                azurePowerShellVersion: 'LatestVersion'
                
               Step 2: Update your vmExtension.json template
Update the fileUris to use the URL from the pipeline variable:
json


"fileUris": [
    "$(scriptUrl)"
],

In your Azure DevOps pipeline, use a task to replace the token:
yaml

- task: FileTransform@1
  inputs:
    folderPath: '$(Build.SourcesDirectory)'
    fileType: 'json'
    targetFiles: '**/vmExtension.json'

 
    Option 2: Embed the Script in ARM Template (Simpler)
If your script is not too large, you can embed it directly:
Step 1: Convert your install-ir.ps1 to Base64
Add this to your pipeline:



- task: PowerShell@2
  displayName: 'Encode Script'
  inputs:
    targetType: 'inline'
    script: |
      $scriptContent = Get-Content -Path "$(Build.SourcesDirectory)/install-ir.ps1" -Raw
      $bytes = [System.Text.Encoding]::UTF8.GetBytes($scriptContent)
      $encodedText = [Convert]::ToBase64String($bytes)
      Write-Host "##vso[task.setvariable variable=encodedScript]$encodedText"



      Step 2: Modify vmExtension.json
Update your VM extension to use inline script:


"properties": {
  "publisher": "Microsoft.Compute",
  "type": "CustomScriptExtension",
  "typeHandlerVersion": "1.10",
  "autoUpgradeMinorVersion": true,
  "protectedSettings": {
    "commandToExecute": "[concat('powershell -ExecutionPolicy Unrestricted -EncodedCommand ', parameters('encodedScript'), ' -AuthKey \"', reference('getIRKey').outputs.authKey, '\" -NodeName \"', concat('VOSDEVDS0', copyIndex(1)), '\"')]"
  }
}

Add this parameter to your vmExtension.json:

"parameters": {
  "encodedScript": {
    "type": "string",
    "metadata": {
      "description": "Base64 encoded script content"
    }
  },
  // ... other parameters
}


Step 3: Pass the parameter in your deployment task

- task: AzurePowerShell@5
  displayName: 'Deploy VM Extensions'
  inputs:
    azureSubscription: 'YourServiceConnection'
    ScriptType: 'InlineScript'
    Inline: |
      # Deploy VM Extensions
      New-AzResourceGroupDeployment `
        -ResourceGroupName $(resourceGroupName) `
        -TemplateFile "$(templateFilePath)" `
        -TemplateParameterFile "$(parametersFilePath)" `
        -encodedScript "$(encodedScript)"

        









